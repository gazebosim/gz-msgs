/*
 * Copyright (C) 2018 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

#ifndef IGNITION_TRANSPORT_TEST_CONFIG_H_
#define IGNITION_TRANSPORT_TEST_CONFIG_H_

#define PROJECT_SOURCE_PATH "${PROJECT_SOURCE_DIR}"
#define IGN_CONFIG_PATH "@CMAKE_BINARY_DIR@/test/conf"
#define IGN_TEST_LIBRARY_PATH "${PROJECT_BINARY_DIR}/src"

#if (_MSC_VER >= 1400) // Visual Studio 2005
  #include <sstream>

  /// \brief setenv/unstenv are not present in Windows. Define them to make
  /// the code portable.
  /// \param[in] _name Variable name.
  /// \param[in] _value Value.
  /// \param[in] _rewrite If 'name' does exist in the environment, then its
  /// value is changed to 'value' if 'rewrite' is nonzero. If overwrite is
  /// zero, then the value of 'name' is not changed.
  /// /return 0 on success or -1 on error.
  int setenv(const char *_name, const char *_value, int /*_rewrite*/)
  {
    std::stringstream sstr;
    std::string name = _name;
    std::string value = _value;
    sstr << name << '=' << value;
    return _putenv(sstr.str().c_str());
  }

  /// \brief Deletes an environment variable.
  /// \param[in] _name Variable name.
  void unsetenv(const char *_name)
  {
    std::stringstream sstr;
    std::string name = _name;
    sstr << name << '=';
    _putenv(sstr.str().c_str());
  }
#endif

#endif
